@use './_variables.scss' as v;
@use './_theming.scss' as t;

$btn-padding: v.$space-5;
$btn-radius: v.$space-1;

@mixin _button(
	$bg: var(--color-primary),
	$color: var(--color-surface),
	$padding: $btn-padding,
	$radius: $btn-radius
) {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	padding: $padding;
	background-color: $bg;
	color: $color;
	border-radius: $radius;
	border: none;
	cursor: pointer;
	transition: background-color 0.2s ease;

	&:hover {
		background-color: var(--color-primary-hover);
	}

	&:focus {
		outline: 2px solid var(--color-focus-ring);
		outline-offset: 2px;
	}
}

@mixin links() {
	a {
		text-decoration: none;
		color: inherit;

		&:hover {
			color: var(--color-success);
		}
	}
}

// Assume you have a $tokens map (colors, spacings, radii, etc.)
@mixin button-kit($name, $hierarchy, $tone: brand, $size: md, $shape: rounded, $content: text) {
	$selector: '.btn-#{$name}';

	#{$selector} {
		@include button-reset(); // normalize base styles

		// === Hierarchy & Style resolution ===
		@if $hierarchy == primary {
			@include button-filled($tone);
		} @else if $hierarchy == secondary {
			@include button-outlined($tone);
		} @else if $hierarchy == tertiary {
			@include button-text($tone);
		} @else if $hierarchy == link {
			@include button-link($tone);
		} @else {
			@error "Unknown hierarchy: #{$hierarchy}";
		}

		// === Size ===
		@include button-size($size);

		// === Shape ===
		@include button-shape($shape);

		// === Content type (text vs icon-only) ===
		@include button-content($content);

		// === States ===
		&:hover {
			@include button-hover($hierarchy, $tone);
		}
		&:focus {
			@include button-focus($hierarchy, $tone);
		}
		&:focus-visible {
			@include button-focus-visible($hierarchy, $tone);
		}
		&:active {
			@include button-active($hierarchy, $tone);
		}
		&:disabled,
		&[aria-disabled='true'] {
			@include button-disabled($hierarchy);
		}
	}
}
